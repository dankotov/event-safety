{"version":3,"sources":["services/points.js","Map/index.js","App.js","serviceWorker.js","index.js"],"names":["getAll","a","axios","get","points","data","getById","id","point","submitPoint","newPoint","post","response","Wrapper","styled","div","props","width","height","Map","useState","latlng","setLatLng","type","setType","description","setDescription","mapRef","useRef","useEffect","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","current","map","center","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","addTo","marker","on","e","console","log","getLatLng","lat","lng","circle","latitude","longitude","color","fillColor","fillOpacity","radius","bindPopup","content","handleFormSubmission","servicePoints","concat","style","display","length","opacity","className","onSubmit","onChange","target","value","handleTypeChange","placeholder","handleDescriptionChange","disabled","OuterWrapper","AppWrapper","Container","App","pointsArray","setPointsArray","loading","setLoading","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fcef220.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// const baseUrl = \"http://localhost:3001/api/points\";\nconst baseUrl = \"/api/points\";\n\nconst getAll = async () => {\n    const points = await axios.get(baseUrl);\n    return points.data;\n}\n\nconst getById = async (id) => {\n    const point = await axios.get(`${baseUrl}/${id}`);\n    return point.data;\n}\n\nconst submitPoint = async (newPoint) => {\n    const response = await axios.post(baseUrl, newPoint);\n    return response.data;\n}\n\nexport default {getAll, getById, submitPoint};","import React, { useState, useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport servicePoints from '../services/points';\nimport styled from 'styled-components';\nimport './index.css';\n\nconst Wrapper = styled.div`\n\twidth: ${props => props.width};\n\theight: ${props => props.height};\n`;\n\nconst Map = ({ points }) => {\n\n\tconst [latlng, setLatLng] = useState([]);\n\tconst [type, setType] = useState(\"\");\n\tconst [description, setDescription] = useState(\"\");\n\n\n\tconst mapRef = useRef(null);\n\n\t//Creation of map\n\n\tuseEffect(() => {\n\n\t\tdelete L.Icon.Default.prototype._getIconUrl;\n\t\tL.Icon.Default.mergeOptions({\n\t\t\ticonRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n\t\t\ticonUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n\t\t\tshadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n\t\t});\n\n\t\tmapRef.current = L.map('map', {\n\t\t\tcenter: [43.657998, -79.378355],\n\t\t\tzoom: 17,\n\t\t\tzoomControl: false\n\t\t});\n\n\t\tL.tileLayer('https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png', {\n\t\t\tdetectRetina: true,\n\t\t\tmaxZoom: 20,\n\t\t\tmaxNativeZoom: 17,\n\t\t}).addTo(mapRef.current);\n\n\t\tconst marker = L.marker();\n\t\tfunction onMapClick(e) {\n\t\t\tmarker.setLatLng(e.latlng).addTo(mapRef.current);\n\t\t\tconsole.log(marker.getLatLng());\n\t\t\tconst latlng = marker.getLatLng();\n\t\t\tsetLatLng([latlng.lat, latlng.lng]);\n\t\t\tconsole.log(\"state\", latlng);\n\t\t}\n\t\tmapRef.current.on('click', onMapClick);\n\n\n\t}, [])\n\n\t//Put points on map\n\n\tuseEffect(() => {\n\t\tpoints.map(point => {\n\t\t\tif (point.type === \"danger\") {\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tfillColor: '#f03',\n\t\t\t\t\tfillOpacity: 0.5,\n\t\t\t\t\tradius: 17,\n\t\t\t\t}).addTo(mapRef.current);\n\t\t\t\tcircle.bindPopup(point.content);\n\t\t\t}\n\t\t\telse if (point.type === \"interference\") {\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\n\t\t\t\t\tcolor: '#ff8c00',\n\t\t\t\t\tfillColor: '#ffa500',\n\t\t\t\t\tfillOpacity: 0.5,\n\t\t\t\t\tradius: 17,\n\t\t\t\t}).addTo(mapRef.current);\n\t\t\t\tcircle.bindPopup(point.content);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\n\t\t\t\t\tcolor: 'green',\n\t\t\t\t\tfillColor: '#90ee90',\n\t\t\t\t\tfillOpacity: 0.5,\n\t\t\t\t\tradius: 17,\n\t\t\t\t}).addTo(mapRef.current);\n\t\t\t\tcircle.bindPopup(point.content);\n\t\t\t}\n\t\t})\n\t}, [])\n\n\n\tconst handleTypeChange = (e) => {\n\t\tsetType(e.target.value);\n\t}\n\n\tconst handleDescriptionChange = (e) => {\n\t\tsetDescription(e.target.value);\n\t}\n\n\tconst handleFormSubmission = async (e) => {\n\t\ttry {\n\t\t\tconst newPoint = await servicePoints.submitPoint({ \"type\": type, \"content\": description, \"latitude\": latlng[0], \"longitude\": latlng[1] });\n\t\t\tpoints.concat(newPoint);\n\t\t}\n\t\tcatch (ex) {\n\t\t\tconsole.log('error', ex);\n\t\t}\n\t\tsetDescription(\"\");\n\t\tsetType(\"\");\n\t\tsetLatLng([]);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<div style={{ display: \"block\", width: \"100%\" }}>\n\t\t\t\t<Wrapper style={{ display: \"block\" }} width=\"100%\" height=\"450px\" id=\"map\" />\n\t\t\t\t<h2>See something - say something</h2>\n\t\t\t\t{\n\t\t\t\t\tlatlng.length > 0 && type && description ?\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p style={{ opacity: 0 }}>Please</p>\n\t\t\t\t\t\t</> :\n\t\t\t\t\t\t<p>Please {latlng.length === 0 ? \"pin a point on the map\" : \"\"} {type ? \"\" : \", select the type of an event\"} {description ? \"\" : \", provide a short description\"}</p>\n\n\t\t\t\t}\n\t\t\t\t<div className=\"formContainer\">\n\t\t\t\t\t<form className=\"formElem myForm\" onSubmit={handleFormSubmission}>\n\t\t\t\t\t\t<div className=\"selectContainer formElem\">\n\t\t\t\t\t\t\t<select className=\"selector\" onChange={(e) => handleTypeChange(e)}>\n\t\t\t\t\t\t\t\t<option value=\"\">Select type</option>\n\t\t\t\t\t\t\t\t<option value=\"danger\">Danger</option>\n\t\t\t\t\t\t\t\t<option value=\"interference\">Interference</option>\n\t\t\t\t\t\t\t\t<option value=\"event\">Event</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"inputContainer formElem\">\n\t\t\t\t\t\t\t<input className=\"inText\" type=\"text\" placeholder=\"Short description\" onChange={(e) => handleDescriptionChange(e)} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"buttonContainer formElem\">\n\t\t\t\t\t\t\t<button disabled={!type || latlng.length === 0 || !description} type=\"submit\">submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n\n}\n\nexport default Map;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Map from './Map';\nimport servicePoints from \"./services/points\";\n\n\nconst OuterWrapper = styled.div`\n  display: table; \n  position: absolute;\n  height: 80%;\n  width: 100%;\n`;\n\nconst AppWrapper = styled.div`\n  display: table-cell;\n  vertical-align: middle;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: auto auto;\n  padding-top: 40px;\n  padding-bottom: 40px;\n`;\n\nconst App = () => {\n\n  const [pointsArray, setPointsArray] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const points = await servicePoints.getAll();\n      setPointsArray(points);\n      setLoading(false);\n    }\n    fetchData();\n\n  }, [])\n  console.log('Points from db', pointsArray);\n\n  if(loading){\n    return(\n      <p>loading...</p>\n    )\n  }\n\n  return (\n    <>\n    <OuterWrapper>\n      <AppWrapper>\n        <Container>\n          <Map points={pointsArray} />\n        </Container>\n      </AppWrapper>\n    </OuterWrapper>\n    </>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}