{"version":3,"sources":["Map/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","props","width","height","Map","this","map","L","center","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","addTo","id","React","Component","OuterWrapper","AppWrapper","Container","App","state","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAKA,IAAMA,EAAUC,IAAOC,IAAV,KACH,SAAAC,GAAK,OAAIA,EAAMC,SACd,SAAAD,GAAK,OAAIA,EAAME,UAGLC,E,4LAEnBC,KAAKC,IAAMC,IAAED,IAAI,MAAO,CACvBE,OAAQ,CAAC,WAAY,WACrBC,KAAM,GACNC,aAAa,IAGdH,IAAEI,UAAU,+DAAgE,CAC3EC,cAAc,EACdC,QAAS,GACTC,cAAe,KACbC,MAAMV,KAAKC,O,+BAId,OAAO,kBAACR,EAAD,CAASI,MAAM,QAAQC,OAAO,QAAQa,GAAG,Y,GAhBjBC,IAAMC,W,uZCNvC,IAAMC,EAAepB,IAAOC,IAAV,KAOZoB,EAAarB,IAAOC,IAAV,KAKVqB,EAAYtB,IAAOC,IAAV,KAMMsB,E,YACnB,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDsB,MAAQ,CACXC,SAAS,GAJM,E,sEAUjB,OACE,kBAACL,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,EAAD,a,GAfqBJ,IAAMC,WCVnBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03931178.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n\twidth: ${props => props.width};\n\theight: ${props => props.height};\n`;\n\nexport default class Map extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.map = L.map('map', {\n\t\t\tcenter: [43.657998, -79.378355],\n\t\t\tzoom: 17,\n\t\t\tzoomControl: false\n\t\t});\n\t\t\n\t\tL.tileLayer('https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png', {\n\t\t\tdetectRetina: true,\n\t\t\tmaxZoom: 20,\n\t\t\tmaxNativeZoom: 17,\n\t\t}).addTo(this.map);\n\t}\n\n\trender() {\n\t\treturn <Wrapper width=\"800px\" height=\"600px\" id=\"map\" />\n\t}\n}","import React from 'react';\nimport styled from 'styled-components';\nimport Map from './Map';\n\nconst OuterWrapper = styled.div`\n  display: table; \n  position: absolute;\n  height: 85%;\n  width: 100%;\n`;\n\nconst AppWrapper = styled.div`\n  display: table-cell;\n  vertical-align: middle;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: auto auto;\n`;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checked: false,\n    }\n\n  }\n\n  render() {\n    return (\n      <OuterWrapper>\n        <AppWrapper>\n          <Container>\n            <Map />\n          </Container>\n        </AppWrapper>\n      </OuterWrapper>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}