{"version":3,"sources":["services/points.js","Map/index.js","App.js","serviceWorker.js","index.js"],"names":["getAll","a","axios","get","points","data","getById","id","point","submitPoint","newPoint","post","response","Wrapper","styled","div","props","width","height","Map","useState","latlng","setLatLng","type","setType","description","setDescription","mapRef","useRef","useEffect","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","current","map","center","zoom","zoomControl","tileLayer","detectRetina","maxZoom","maxNativeZoom","addTo","marker","on","e","console","log","getLatLng","lat","lng","circle","latitude","longitude","color","fillColor","fillOpacity","radius","bindPopup","content","handleFormSubmission","servicePoints","concat","style","display","length","opacity","onSubmit","onChange","target","value","handleTypeChange","placeholder","handleDescriptionChange","disabled","OuterWrapper","AppWrapper","Container","App","pointsArray","setPointsArray","loading","setLoading","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAoBe,GAACA,OAfJ,uCAAG,4BAAAC,EAAA,sEACUC,IAAMC,IAHf,eAED,cACLC,EADK,yBAEJA,EAAOC,MAFH,2CAAH,qDAeYC,QAVX,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACQC,IAAMC,IAAN,UARR,cAQQ,YAAwBI,IADhC,cACNC,EADM,yBAELA,EAAMH,MAFD,2CAAH,sDAUoBI,YALhB,uCAAG,WAAOC,GAAP,eAAAT,EAAA,sEACOC,IAAMS,KAbjB,cAa+BD,GAD3B,cACVE,EADU,yBAETA,EAASP,MAFA,2CAAH,uD,sGCTjB,IAAMQ,EAAUC,IAAOC,IAAV,KACH,SAAAC,GAAK,OAAIA,EAAMC,SACd,SAAAD,GAAK,OAAIA,EAAME,UAuIXC,EApIH,SAAC,GAAgB,IAAdf,EAAa,EAAbA,OAAa,EAECgB,mBAAS,IAFV,mBAEpBC,EAFoB,KAEZC,EAFY,OAGHF,mBAAS,IAHN,mBAGpBG,EAHoB,KAGdC,EAHc,OAIWJ,mBAAS,IAJpB,mBAIpBK,EAJoB,KAIPC,EAJO,KAOrBC,EAASC,iBAAO,MAItBC,qBAAU,kBAEFC,IAAEC,KAAKC,QAAQC,UAAUC,YAChCJ,IAAEC,KAAKC,QAAQG,aAAa,CAC3BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,MAGpBV,EAAOa,QAAUV,IAAEW,IAAI,MAAO,CAC7BC,OAAQ,CAAC,WAAY,WACrBC,KAAM,GACNC,aAAa,IAGdd,IAAEe,UAAU,+DAAgE,CAC3EC,cAAc,EACdC,QAAS,GACTC,cAAe,KACbC,MAAMtB,EAAOa,SAEhB,IAAMU,EAASpB,IAAEoB,SAQjBvB,EAAOa,QAAQW,GAAG,SAPlB,SAAoBC,GACnBF,EAAO5B,UAAU8B,EAAE/B,QAAQ4B,MAAMtB,EAAOa,SACxCa,QAAQC,IAAIJ,EAAOK,aACnB,IAAMlC,EAAS6B,EAAOK,YACtBjC,EAAU,CAACD,EAAOmC,IAAKnC,EAAOoC,MAC9BJ,QAAQC,IAAI,QAASjC,QAKpB,IAIHQ,qBAAU,WACTzB,EAAOqC,KAAI,SAAAjC,GACV,GAAmB,WAAfA,EAAMe,KACMO,IAAE4B,OAAO,CAAClD,EAAMmD,SAAUnD,EAAMoD,WAAY,CAC1DC,MAAO,MACPC,UAAW,OACXC,YAAa,GACbC,OAAQ,KACNf,MAAMtB,EAAOa,SACTyB,UAAUzD,EAAM0D,cAEnB,GAAmB,iBAAf1D,EAAMe,KAAyB,CACxBO,IAAE4B,OAAO,CAAClD,EAAMmD,SAAUnD,EAAMoD,WAAY,CAC1DC,MAAO,UACPC,UAAW,UACXC,YAAa,GACbC,OAAQ,KACNf,MAAMtB,EAAOa,SACTyB,UAAUzD,EAAM0D,aAEnB,CACWpC,IAAE4B,OAAO,CAAClD,EAAMmD,SAAUnD,EAAMoD,WAAY,CAC1DC,MAAO,QACPC,UAAW,UACXC,YAAa,GACbC,OAAQ,KACNf,MAAMtB,EAAOa,SACTyB,UAAUzD,EAAM0D,eAGvB,IAGH,IAQMC,EAAoB,uCAAG,WAAOf,GAAP,eAAAnD,EAAA,+EAEJmE,EAAc3D,YAAY,CAAE,KAAQc,EAAM,QAAWE,EAAa,SAAYJ,EAAO,GAAI,UAAaA,EAAO,KAFzG,OAErBX,EAFqB,OAG3BN,EAAOiE,OAAO3D,GAHa,gDAM3B2C,QAAQC,IAAI,QAAZ,MAN2B,QAQ5B5B,EAAe,IACfF,EAAQ,IACRF,EAAU,IAVkB,yDAAH,sDAc1B,OACC,oCACC,yBAAKgD,MAAO,CAAEC,QAAS,QAAStD,MAAO,SACtC,kBAACJ,EAAD,CAASyD,MAAO,CAAEC,QAAS,SAAWtD,MAAM,OAAOC,OAAO,QAAQX,GAAG,QAEpEc,EAAOmD,OAAS,GAAKjD,GAAQE,EAC5B,oCACC,uBAAG6C,MAAO,CAAEG,QAAS,IAArB,WAED,qCAA6B,IAAlBpD,EAAOmD,OAAe,yBAA2B,GAA5D,IAAiEjD,EAAO,GAAK,gCAA7E,IAA+GE,EAAc,GAAK,iCAGpI,0BAAMiD,SAAUP,GACf,4BAAQQ,SAAU,SAACvB,GAAD,OAnCG,SAACA,GACzB5B,EAAQ4B,EAAEwB,OAAOC,OAkCWC,CAAiB1B,KACzC,4BAAQyB,MAAM,IAAd,eACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,SAAd,UAED,6BACA,2BAAOtD,KAAK,OAAOwD,YAAY,oBAAoBJ,SAAU,SAACvB,GAAD,OAtCjC,SAACA,GAChC1B,EAAe0B,EAAEwB,OAAOC,OAqC+CG,CAAwB5B,MAR7F,IAQoG,6BACnG,4BAAQ6B,UAAW1D,GAAyB,GAAjBF,EAAOmD,SAAgB/C,EAAaF,KAAK,UAApE,c,scChIL,IAAM2D,EAAepE,IAAOC,IAAV,KAOZoE,EAAarE,IAAOC,IAAV,KAKVqE,EAAYtE,IAAOC,IAAV,KA2CAsE,EAnCH,WAAO,IAAD,EAEsBjE,mBAAS,IAF/B,mBAETkE,EAFS,KAEIC,EAFJ,OAGcnE,oBAAS,GAHvB,mBAGToE,EAHS,KAGAC,EAHA,KAgBhB,OAXA5D,qBAAU,WAAM,4CACd,4BAAA5B,EAAA,sEACuBmE,EAAcpE,SADrC,OACQI,EADR,OAEEmF,EAAenF,GACfqF,GAAW,GAHb,4CADc,uBAAC,WAAD,wBAMdC,KAEC,IACHrC,QAAQC,IAAI,iBAAkBgC,GAE3BE,EAEC,yCAKF,oCACA,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAKhF,OAAQkF,SCzCHK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.256846d0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// const baseUrl = \"http://localhost:3001/api/points\";\r\nconst baseUrl = \"/api/points\";\r\n\r\nconst getAll = async () => {\r\n    const points = await axios.get(baseUrl);\r\n    return points.data;\r\n}\r\n\r\nconst getById = async (id) => {\r\n    const point = await axios.get(`${baseUrl}/${id}`);\r\n    return point.data;\r\n}\r\n\r\nconst submitPoint = async (newPoint) => {\r\n    const response = await axios.post(baseUrl, newPoint);\r\n    return response.data;\r\n}\r\n\r\nexport default {getAll, getById, submitPoint};","import React, { useState, useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport servicePoints from '../services/points';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n\twidth: ${props => props.width};\r\n\theight: ${props => props.height};\r\n`;\r\n\r\nconst Map = ({ points }) => {\r\n\r\n\tconst [latlng, setLatLng] = useState([]);\r\n\tconst [type, setType] = useState(\"\");\r\n\tconst [description, setDescription] = useState(\"\");\r\n\r\n\r\n\tconst mapRef = useRef(null);\r\n\r\n\t//Creation of map\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tdelete L.Icon.Default.prototype._getIconUrl;\r\n\t\tL.Icon.Default.mergeOptions({\r\n\t\t\ticonRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n\t\t\ticonUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n\t\t\tshadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\r\n\t\t});\r\n\r\n\t\tmapRef.current = L.map('map', {\r\n\t\t\tcenter: [43.657998, -79.378355],\r\n\t\t\tzoom: 17,\r\n\t\t\tzoomControl: false\r\n\t\t});\r\n\r\n\t\tL.tileLayer('https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png', {\r\n\t\t\tdetectRetina: true,\r\n\t\t\tmaxZoom: 20,\r\n\t\t\tmaxNativeZoom: 17,\r\n\t\t}).addTo(mapRef.current);\r\n\r\n\t\tconst marker = L.marker();\r\n\t\tfunction onMapClick(e) {\r\n\t\t\tmarker.setLatLng(e.latlng).addTo(mapRef.current);\r\n\t\t\tconsole.log(marker.getLatLng());\r\n\t\t\tconst latlng = marker.getLatLng();\r\n\t\t\tsetLatLng([latlng.lat, latlng.lng]);\r\n\t\t\tconsole.log(\"state\", latlng);\r\n\t\t}\r\n\t\tmapRef.current.on('click', onMapClick);\r\n\r\n\r\n\t}, [])\r\n\r\n\t//Put points on map\r\n\r\n\tuseEffect(() => {\r\n\t\tpoints.map(point => {\r\n\t\t\tif (point.type === \"danger\") {\r\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\r\n\t\t\t\t\tcolor: 'red',\r\n\t\t\t\t\tfillColor: '#f03',\r\n\t\t\t\t\tfillOpacity: 0.5,\r\n\t\t\t\t\tradius: 17,\r\n\t\t\t\t}).addTo(mapRef.current);\r\n\t\t\t\tcircle.bindPopup(point.content);\r\n\t\t\t}\r\n\t\t\telse if (point.type === \"interference\") {\r\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\r\n\t\t\t\t\tcolor: '#ff8c00',\r\n\t\t\t\t\tfillColor: '#ffa500',\r\n\t\t\t\t\tfillOpacity: 0.5,\r\n\t\t\t\t\tradius: 17,\r\n\t\t\t\t}).addTo(mapRef.current);\r\n\t\t\t\tcircle.bindPopup(point.content);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst circle = L.circle([point.latitude, point.longitude], {\r\n\t\t\t\t\tcolor: 'green',\r\n\t\t\t\t\tfillColor: '#90ee90',\r\n\t\t\t\t\tfillOpacity: 0.5,\r\n\t\t\t\t\tradius: 17,\r\n\t\t\t\t}).addTo(mapRef.current);\r\n\t\t\t\tcircle.bindPopup(point.content);\r\n\t\t\t}\r\n\t\t})\r\n\t}, [])\r\n\r\n\r\n\tconst handleTypeChange = (e) => {\r\n\t\tsetType(e.target.value);\r\n\t}\r\n\r\n\tconst handleDescriptionChange = (e) => {\r\n\t\tsetDescription(e.target.value);\r\n\t}\r\n\r\n\tconst handleFormSubmission = async (e) => {\r\n\t\ttry {\r\n\t\t\tconst newPoint = await servicePoints.submitPoint({ \"type\": type, \"content\": description, \"latitude\": latlng[0], \"longitude\": latlng[1] });\r\n\t\t\tpoints.concat(newPoint);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.log('error', ex);\r\n\t\t}\r\n\t\tsetDescription(\"\");\r\n\t\tsetType(\"\");\r\n\t\tsetLatLng([]);\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div style={{ display: \"block\", width: \"100%\" }}>\r\n\t\t\t\t<Wrapper style={{ display: \"block\" }} width=\"100%\" height=\"600px\" id=\"map\" />\r\n\t\t\t\t{\r\n\t\t\t\t\tlatlng.length > 0 && type && description ?\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<p style={{ opacity: 0 }}>Please</p>\r\n\t\t\t\t\t\t</> :\r\n\t\t\t\t\t\t<p>Please {latlng.length === 0 ? \"pin a point on the map\" : \"\"} {type ? \"\" : \", select the type of an event\"} {description ? \"\" : \", provide a short description\"}</p>\r\n\r\n\t\t\t\t}\r\n\t\t\t\t<form onSubmit={handleFormSubmission}>\r\n\t\t\t\t\t<select onChange={(e) => handleTypeChange(e)}>\r\n\t\t\t\t\t\t<option value=\"\">Select type</option>\r\n\t\t\t\t\t\t<option value=\"danger\">Danger</option>\r\n\t\t\t\t\t\t<option value=\"interference\">Interference</option>\r\n\t\t\t\t\t\t<option value=\"event\">Event</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"short description\" onChange={(e) => handleDescriptionChange(e)} /> <br />\r\n\t\t\t\t\t<button disabled={!type || latlng.length == 0 || !description} type=\"submit\">submit</button>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Map from './Map';\r\nimport servicePoints from \"./services/points\";\r\n\r\n\r\nconst OuterWrapper = styled.div`\r\n  display: table; \r\n  position: absolute;\r\n  height: 80%;\r\n  width: 100%;\r\n`;\r\n\r\nconst AppWrapper = styled.div`\r\n  display: table-cell;\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: auto auto;\r\n  padding-top: 40px;\r\n  padding-bottom: 40px;\r\n`;\r\n\r\nconst App = () => {\r\n\r\n  const [pointsArray, setPointsArray] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const points = await servicePoints.getAll();\r\n      setPointsArray(points);\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n\r\n  }, [])\r\n  console.log('Points from db', pointsArray);\r\n\r\n  if(loading){\r\n    return(\r\n      <p>loading...</p>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <OuterWrapper>\r\n      <AppWrapper>\r\n        <Container>\r\n          <Map points={pointsArray} />\r\n        </Container>\r\n      </AppWrapper>\r\n    </OuterWrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}